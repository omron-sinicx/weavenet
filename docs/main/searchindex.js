Search.setIndex({"docnames": ["API/index", "API/layers", "API/losses", "API/metrics", "API/models", "API/preference", "API/sparse_layers", "API/sparse_models", "index"], "filenames": ["API/index.rst", "API/layers.rst", "API/losses.rst", "API/metrics.rst", "API/models.rst", "API/preference.rst", "API/sparse_layers.rst", "API/sparse_models.rst", "index.rst"], "titles": ["API", "Layers", "Losses", "Metrics", "Models", "Preferences", "Sparse Layers", "Sparse Models", "WeaveNet API Document"], "terms": {"layer": [0, 4, 7], "model": 0, "spars": [0, 1], "loss": [0, 4, 7], "metric": 0, "prefer": 0, "class": [1, 4, 6, 7], "weavenet": [1, 2, 3, 4, 5, 6, 7], "setencoderpointnet": [1, 6], "in_channel": [1, 4, 6, 7], "mid_channel": [1, 4, 6, 7], "output_channel": [1, 4, 6, 7], "kwarg": [1, 4, 6, 7], "sourc": [1, 2, 3, 4, 5, 6, 7], "appli": [1, 4, 6, 7], "process": [1, 4, 6, 7], "propos": [1, 2], "deepset": 1, "pointnet": 1, "set": [1, 4, 6, 7], "out": 1, "edg": [1, 4, 6, 7], "featur": [1, 4, 6, 7], "each": [1, 2, 3, 4, 5, 6, 7], "vertex": [1, 4, 6, 7], "see": [1, 2, 6, 7], "setencoderbas": [1, 6], "its": 1, "forward": [1, 4, 6, 7], "paramet": [1, 2, 3, 4, 5, 6, 7], "int": [1, 4, 5, 6, 7], "number": [1, 3, 4, 6], "input": [1, 4, 6, 7], "channel": [1, 5, 6], "output": [1, 2, 3, 4, 5, 6, 7], "first": [1, 4, 6, 7], "convolut": [1, 6], "second": [1, 6], "crossconcat": [1, 4, 7], "dim_featur": 1, "1": [1, 2, 4, 5, 6, 7], "cross": 1, "concaten": 1, "introduc": 1, "select": [1, 6], "weav": 1, "point": [1, 4, 7], "cloud": 1, "match": [1, 2, 3, 4, 5, 7], "text": [1, 2, 4, 5, 6, 7], "x": [1, 4, 6, 7], "ab": [1, 2], "ba": [1, 2], "top": [1, 6], "cat": 1, "dim": [1, 4, 5, 6], "exampl": [1, 4, 7], "usag": [1, 4, 7], "prepar": 1, "an": [1, 4, 6, 7], "instanc": [1, 6], "thi": [1, 4, 6, 7], "interactor": [1, 4], "assum": [1, 4, 5], "batch_siz": [1, 5], "8": 1, "problem": [1, 2, 4], "size": [1, 6], "i": [1, 2, 3, 4, 5, 6, 7], "6x5": 1, "32": [1, 4, 7], "b": [1, 2, 3, 4, 5, 6, 7], "n": [1, 2, 3, 4, 5, 6, 7], "m": [1, 2, 3, 4, 5, 6, 7], "c": [1, 4, 6, 7], "6": [1, 4], "5": [1, 6], "xab": [1, 4, 6, 7], "torch": [1, 6], "rand": 1, "dtype": 1, "float": [1, 6], "random": 1, "nxm": 1, "xba": [1, 6], "mxn": 1, "xba_t": [1, 4, 6, 7], "transpos": [1, 2, 6], "2": [1, 2, 4, 6, 7], "zab": 1, "zba_t": 1, "assert": 1, "input_channel": [1, 4, 6, 7], "return": [1, 2, 3, 4, 5, 6, 7], "type": [1, 2, 3, 4, 5, 6, 7], "shape": [1, 2, 3, 4, 5, 6, 7], "ldot": [1, 2, 4, 5, 6, 7], "tensor": [1, 2, 3, 4, 5, 6, 7], "batch": [1, 2, 3, 4, 5, 6, 7], "map": [1, 6], "typic": [1, 4, 6], "where": [1, 2, 3, 5, 6], "ij": [1, 5, 6], "th": [1, 6], "j": [1, 2, 6], "time": [1, 2, 6], "repres": [1, 6], "from": [1, 2, 4, 6, 7], "side": [1, 2, 3, 4, 6, 7], "same": [1, 2, 6], "calcul": [1, 2, 3, 6], "tupl": [1, 3, 4, 6, 7], "crossconcatvertexfeatur": [1, 4, 7], "dim_a": [1, 4, 7], "3": [1, 4, 6, 7], "dim_b": [1, 4, 7], "compute_similar": [1, 4, 6, 7], "none": [1, 2, 4, 6, 7], "directional_norm": [1, 4, 7], "which": [1, 2, 7], "ar": [1, 2, 4, 6, 7], "provid": 1, "extractor": 1, "dimens": 1, "option": [1, 2, 4, 6, 7], "callabl": [1, 4, 6, 7], "oper": [1, 6], "similar": [1, 6], "between": [1, 2, 3], "two": [1, 2, 4], "If": [1, 3, 4, 6], "ha": [1, 3, 6], "addit": 1, "normal": [1, 4, 7], "ax": 1, "function": [1, 4, 6, 7], "ignor": [1, 6], "xa": [1, 4, 7], "xb": [1, 4, 7], "concat": 1, "while": [1, 6], "append": 1, "base": [1, 2, 4, 6, 7], "callback": 1, "x_a": [1, 6], "x_b": [1, 6], "onli": [1, 4, 6, 7], "math": [1, 4, 7], "both": [1, 4, 7], "A": [1, 3, 4, 6, 7], "pair": [1, 3], "wise": [1, 2], "block": [1, 3], "Its": 1, "consist": 1, "dimension": 1, "whose": [1, 6], "depend": 1, "__init__": [1, 4, 7], "self": 1, "maxpoolingaggreg": 1, "aggreg": [1, 4, 6, 7], "virtual": 1, "reshap": 1, "have": [1, 2, 3, 6], "other": [1, 4, 7], "chann": 1, "merger": [1, 6], "dim_target": [1, 4], "x_aggreg": [1, 6], "dualsoftmax": [1, 6], "dim_src": [1, 6], "dim_tar": [1, 6], "dual": [1, 6], "softmax": [1, 4, 6, 7], "matric": [1, 3, 6], "origin": [1, 2, 6], "loftr": [1, 6], "cvpr2021": 1, "_": [1, 2], "frac": [1, 2], "exp": [1, 2], "sum_j": 1, "sum_i": 1, "In": 1, "definit": [1, 2], "alwai": 1, "t": 1, "extension": 1, "implement": [1, 6], "accept": 1, "neq": [1, 2], "stream": [1, 4, 7], "1st": [1, 6], "2nd": [1, 6], "us": [1, 4, 6, 7], "triplet": [1, 6], "mab": [1, 2, 6], "mba_t": [1, 2, 6], "dualsoftmaxsqrt": [1, 4, 6], "variat": 1, "effect": 1, "when": [1, 6], "deriv": 1, "differ": 1, "comput": [1, 6], "flow": 1, "sinc": [1, 6], "sqrt": [1, 6], "amplifi": 1, "backward": 1, "gradient": 1, "arg": [1, 2, 6], "batchnormxxc": [1, 4], "batchnorm1d": [1, 7], "modul": [1, 4, 6, 7, 8], "preper": 1, "nn": [1, 4, 7], "batchnorm2d": 1, "format": [1, 3, 5], "h": 1, "w": 1, "kernel": 1, "conv2d": 1, "slower": 1, "than": [1, 2], "linear": [1, 6], "our": 1, "case": [1, 2], "bipartit": [1, 4, 7], "graph": [1, 6, 7], "embed": 1, "work": 1, "well": 1, "5x5": 1, "64": [1, 4, 7], "bn": 1, "target": [1, 4, 5, 6, 7], "variabl": 1, "norm": 1, "setencoderpointnetcrossdirect": 1, "max": [1, 2], "pool": 1, "direct": [1, 4, 6, 7], "standard": 1, "setencod": 1, "": [1, 2, 5, 6], "must": 1, "z_edge_featur": 1, "setencoderpointnettotaldirect": 1, "first_process": [1, 6], "second_process_edg": [1, 6], "second_process_vertex": [1, 6], "all": [1, 4, 6, 7], "summer": 1, "defin": [1, 6], "abstract": 1, "z_vertex_featur": 1, "crossdifferenceconcat": 1, "mean": [1, 2], "crossdiffconcat": 1, "wa": 1, "veri": 1, "stabl": [1, 2, 3, 4, 7], "test": 1, "dualsoftmaxfuzzylogicand": [1, 6], "shira": [1, 2], "li": [1, 2], "deep": [1, 2], "learn": [1, 2], "market": [1, 2], "min": [1, 2, 6], "encod": [1, 4, 6, 7], "second_process": [1, 6], "trainabl": [1, 4, 6, 7], "object": [1, 6], "convert": [1, 5, 6], "c_": [1, 6], "mid": [1, 6], "vertic": [1, 3, 6], "The": [1, 2, 3, 6], "result": [1, 4, 5, 6, 7], "reformat": [1, 6], "merg": [1, 4, 6, 7], "ani": [1, 4, 7], "architectur": 1, "It": [1, 2], "report": 1, "estim": [1, 4, 7], "dummi": 1, "perform": [1, 6], "everi": [1, 6], "call": [1, 6], "should": [1, 6], "overridden": [1, 6], "subclass": [1, 6], "although": [1, 6], "recip": [1, 6], "pass": [1, 6], "need": [1, 6], "within": [1, 6], "one": [1, 2, 3, 6], "afterward": [1, 6], "instead": [1, 6], "former": [1, 6], "take": [1, 6], "care": [1, 6], "run": [1, 6], "regist": [1, 6], "hook": [1, 6], "latter": [1, 6], "silent": [1, 6], "them": [1, 6], "loss_one2one_correl": 2, "evalu": 2, "maintain": 2, "doubli": 2, "stochast": 2, "matrix": [2, 3, 6], "contious": 2, "relax": [2, 3], "mathcal": 2, "l": 2, "rm": 2, "one2on": 2, "2nm": 2, "sum_": [2, 5], "m_": 2, "_2": 2, "mba": [2, 6], "note": 2, "coeffici": 2, "can": 2, "loss_one2one_correlation_exp": 2, "loss_one2many_penalti": 2, "valu": [2, 6], "more": 2, "0": [2, 6], "row": 2, "column": 2, "loss_stabl": 2, "sab": [2, 3], "sba_t": [2, 3], "minim": 2, "violat": 2, "stabil": 2, "constraint": 2, "marriag": 2, "expect": 2, "ex": 2, "post": 2, "envi": 2, "_j": 2, "backslash": 2, "_i": 2, "top_": 2, "contin": [2, 3], "assign": [2, 3], "satisfact": [2, 3, 5], "agent": [2, 3, 4, 5, 7], "loss_sexequ": 2, "sex": [2, 3], "equal": [2, 3], "cost": [2, 3, 5], "sexequ": [2, 3], "loss_egalitarian": 2, "egalitarian": [2, 3], "loss_bal": 2, "balanc": [2, 3], "also": 2, "known": 2, "binar": 3, "partner": 3, "vice": [3, 6], "versa": 3, "is_one2on": 3, "check": 3, "whether": 3, "duplic": 3, "correspond": [3, 6], "binari": 3, "bool": [3, 4, 6], "vector": 3, "is_stabl": 3, "sba": 3, "count_blocking_pair": 3, "count": 3, "sexequality_cost": 3, "cab": 3, "cba_t": 3, "pformat": [3, 5], "preferenceformat": [3, 5], "cba": 3, "egalitarian_scor": 3, "score": [3, 6], "balance_scor": 3, "calc_all_fairness_metr": 3, "three": [3, 6], "fair": 3, "trainablematchingmodul": [4, 7], "net": [4, 7], "pre_interactor": [4, 7], "stream_aggreg": [4, 7], "sm_col": 4, "sm_row": 4, "wrap": 4, "gnn": [4, 7], "head": 4, "solv": [4, 7], "variou": 4, "default": [4, 6, 7], "combinatori": [4, 7], "optim": [4, 7], "import": [4, 7], "weave_net": 4, "y_pred": [4, 7], "calc_loss": [4, 7], "y_true": [4, 7], "extract": [4, 7], "vfeature_channel": [4, 7], "compute_similarity_cosin": [4, 7], "feature_extractor": [4, 7], "try": [4, 7], "after": [4, 7], "through": [4, 7], "network": [4, 6, 7], "experimentalunitlistgener": [4, 7], "mid_channels_list": [4, 7], "output_channels_list": [4, 7], "factori": 4, "unit": [4, 7], "sampl": [4, 5, 6], "user": 4, "custom": 4, "list": [4, 5, 6, 7], "order": [4, 7], "activ": [4, 7], "seri": 4, "typing_extens": [4, 7], "liter": [4, 7], "ena": [4, 7], "nae": [4, 7], "ean": [4, 7], "e": [4, 6, 7], "g": [4, 6, 7], "prelu": [4, 7], "replac": [4, 7], "_forward_": [4, 7], "argument": [4, 7], "diment": [4, 6], "unitlistgener": 4, "gener": 4, "end": 4, "concret": 4, "interact": 4, "weavenetunitlistgener": [4, 7], "batch_sum": 5, "mat": 5, "summat": 5, "element": [5, 6], "filter": 5, "continu": 5, "sat2rank": 5, "sat": 5, "rank": 5, "cost2rank": 5, "sat2cost": 5, "cost2sat": 5, "to_cost": 5, "to_sat": 5, "to_rank": 5, "maskselectorbylinearinferenceor": [6, 7], "drop_rat": 6, "tau": 6, "predict": 6, "OR": 6, "rule": 6, "drop": 6, "rate": 6, "mai": 6, "less": 6, "actual": 6, "temperatur": 6, "gumbel": 6, "sigmoid": 6, "build": 6, "automat": 6, "trainablematchingmodulesp": [6, 7], "mask": [6, 7], "maskselectorbynorm": 6, "maskselectorbysimilar": 6, "max_edge_survive_r": 6, "max_survive_edges_per_sampl": 6, "prune": 6, "radiu": 6, "neighbor": 6, "threshold": 6, "consid": 6, "acceler": 6, "fix": 6, "maximum": 6, "selector": 6, "4x4": 6, "16": 6, "most": 6, "7": 6, "path": 6, "max_suvive_edges_per_sampl": 6, "per": 6, "get_threshold_by_k": 6, "sim": 6, "k": 6, "prevend": 6, "memori": 6, "overflow": 6, "param": 6, "kth": 6, "surviv": 6, "wrapup": 6, "sim_select": 6, "maskselectorradiusneighbor": 6, "differenti": 6, "maskselectorreciprocalneighbor": 6, "reciproc": 6, "a\uff4e": 6, "nearest": 6, "similaritybasedmaskinfer": 6, "jit": 6, "scriptfunct": 6, "mask_selector": [6, 7], "infer": 6, "select_mask": 6, "sparsedenseadaptor": 6, "adapt": 6, "dens": 6, "convers": 6, "given": 6, "to_spars": 6, "num_of_selected_edges_in_batch": 6, "flatten": [6, 7], "to_dens": 6, "x_spars": 6, "dot": 6, "flattend": 6, "maxpoolingaggregatorsp": 6, "x_sp": 6, "vertex_id": [6, 7], "d": 6, "otherwis": 6, "axi": 6, "keep": 6, "setencoderbasesp": 6, "version": [6, 7], "num_of_edges_in_batch": 6, "index": [6, 8], "id": [6, 7], "x_process": 6, "setencoderpointnetsp": 6, "out_channel": 6, "dualsoftmaxsp": [6, 7], "apply_softmax": 6, "src_id": 6, "tar_id": 6, "dualsoftmaxsqrtsp": [6, 7], "dualsoftmaxfuzzylogicandsp": 6, "is_xba_transpos": 6, "true": 6, "net_spars": 7, "pre_interactor_spars": 7, "net_dens": 7, "pre_interactor_dens": 7, "variant": 7, "treat": 7, "mask_estim": 7, "algorithm": 7, "pre_net": 7, "befor": 7, "weave_net_sp": 7, "weavenetsp": 7, "experimentalunitlistgeneratorsp": 7, "unitsp": 7, "num_edges_in_batch": 7, "identifi": 7, "src": 7, "vetex": 7, "weavenetunitlistgeneratorsp": 7, "search": 8, "page": 8}, "objects": {"weavenet": [[1, 0, 0, "module-1", "layers"], [2, 0, 0, "-", "loss"], [3, 0, 0, "-", "metric"], [4, 0, 0, "module-1", "model"], [5, 0, 0, "-", "preference"]], "weavenet.layers": [[1, 1, 1, "", "BatchNormXXC"], [1, 1, 1, "", "CrossConcat"], [1, 1, 1, "", "CrossConcatVertexFeatures"], [1, 1, 1, "", "CrossDifferenceConcat"], [1, 1, 1, "", "DualSoftmax"], [1, 1, 1, "", "DualSoftmaxFuzzyLogicAnd"], [1, 1, 1, "", "DualSoftmaxSqrt"], [1, 1, 1, "", "Interactor"], [1, 1, 1, "", "MaxPoolingAggregator"], [1, 1, 1, "", "SetEncoderBase"], [1, 1, 1, "", "SetEncoderPointNet"], [1, 1, 1, "", "SetEncoderPointNetCrossDirectional"], [1, 1, 1, "", "SetEncoderPointNetTotalDirectional"]], "weavenet.layers.BatchNormXXC": [[1, 2, 1, "", "forward"]], "weavenet.layers.CrossConcat": [[1, 2, 1, "", "forward"], [1, 2, 1, "", "output_channels"]], "weavenet.layers.CrossConcatVertexFeatures": [[1, 2, 1, "", "forward"], [1, 2, 1, "", "output_channels"]], "weavenet.layers.CrossDifferenceConcat": [[1, 2, 1, "", "forward"], [1, 2, 1, "", "output_channels"]], "weavenet.layers.DualSoftmax": [[1, 2, 1, "", "forward"]], "weavenet.layers.DualSoftmaxFuzzyLogicAnd": [[1, 2, 1, "", "forward"]], "weavenet.layers.DualSoftmaxSqrt": [[1, 2, 1, "", "forward"]], "weavenet.layers.Interactor": [[1, 2, 1, "", "forward"], [1, 2, 1, "", "output_channels"]], "weavenet.layers.MaxPoolingAggregator": [[1, 2, 1, "", "forward"]], "weavenet.layers.SetEncoderBase": [[1, 2, 1, "", "forward"]], "weavenet.layers.SetEncoderPointNetCrossDirectional": [[1, 2, 1, "", "forward"]], "weavenet.layers.SetEncoderPointNetTotalDirectional": [[1, 2, 1, "", "forward"]], "weavenet.loss": [[2, 3, 1, "", "loss_balance"], [2, 3, 1, "", "loss_egalitarian"], [2, 3, 1, "", "loss_one2many_penalty"], [2, 3, 1, "", "loss_one2one_correlation"], [2, 3, 1, "", "loss_one2one_correlation_exp"], [2, 3, 1, "", "loss_sexequality"], [2, 3, 1, "", "loss_stability"]], "weavenet.metric": [[3, 3, 1, "", "balance_score"], [3, 3, 1, "", "binarize"], [3, 3, 1, "", "calc_all_fairness_metrics"], [3, 3, 1, "", "count_blocking_pairs"], [3, 3, 1, "", "egalitarian_score"], [3, 3, 1, "", "is_one2one"], [3, 3, 1, "", "is_stable"], [3, 3, 1, "", "sexequality_cost"]], "weavenet.model": [[4, 1, 1, "", "ExperimentalUnitListGenerator"], [4, 1, 1, "", "TrainableMatchingModule"], [4, 1, 1, "", "Unit"], [4, 1, 1, "", "UnitListGenerator"], [4, 1, 1, "", "WeaveNetUnitListGenerator"]], "weavenet.model.ExperimentalUnitListGenerator": [[4, 1, 1, "", "Encoder"]], "weavenet.model.TrainableMatchingModule": [[4, 2, 1, "", "forward"]], "weavenet.model.Unit": [[4, 2, 1, "", "forward"]], "weavenet.model.UnitListGenerator": [[4, 2, 1, "", "generate"]], "weavenet.preference": [[5, 3, 1, "", "batch_sum"], [5, 3, 1, "", "cost2rank"], [5, 3, 1, "", "cost2sat"], [5, 3, 1, "", "sat2cost"], [5, 3, 1, "", "sat2rank"], [5, 3, 1, "", "to_cost"], [5, 3, 1, "", "to_rank"], [5, 3, 1, "", "to_sat"]], "weavenet.sparse": [[6, 0, 0, "module-2", "layers"], [7, 0, 0, "module-1", "model"]], "weavenet.sparse.layers": [[6, 1, 1, "id15", "DualSoftmaxFuzzyLogicAndSp"], [6, 1, 1, "id10", "DualSoftmaxSp"], [6, 1, 1, "id13", "DualSoftmaxSqrtSp"], [6, 1, 1, "", "MaskSelectorByLinearInferenceOr"], [6, 1, 1, "", "MaskSelectorByNorm"], [6, 1, 1, "", "MaskSelectorBySimilarity"], [6, 1, 1, "", "MaskSelectorRadiusNeighbor"], [6, 1, 1, "", "MaskSelectorReciprocalNeighbor"], [6, 1, 1, "id5", "MaxPoolingAggregatorSp"], [6, 1, 1, "id7", "SetEncoderBaseSp"], [6, 1, 1, "id9", "SetEncoderPointNetSp"], [6, 1, 1, "", "SimilarityBasedMaskInference"], [6, 1, 1, "id0", "SparseDenseAdaptor"]], "weavenet.sparse.layers.DualSoftmaxFuzzyLogicAndSp": [[6, 2, 1, "id16", "forward"]], "weavenet.sparse.layers.DualSoftmaxSp": [[6, 2, 1, "id11", "apply_softmax"], [6, 2, 1, "id12", "forward"]], "weavenet.sparse.layers.DualSoftmaxSqrtSp": [[6, 2, 1, "id14", "forward"]], "weavenet.sparse.layers.MaskSelectorByLinearInferenceOr": [[6, 2, 1, "", "build"], [6, 2, 1, "", "forward"]], "weavenet.sparse.layers.MaskSelectorByNorm": [[6, 2, 1, "", "forward"]], "weavenet.sparse.layers.MaskSelectorBySimilarity": [[6, 2, 1, "", "get_threshold_by_k"], [6, 2, 1, "", "wrapup"]], "weavenet.sparse.layers.MaskSelectorRadiusNeighbor": [[6, 2, 1, "", "forward"]], "weavenet.sparse.layers.MaskSelectorReciprocalNeighbor": [[6, 2, 1, "", "forward"]], "weavenet.sparse.layers.MaxPoolingAggregatorSp": [[6, 2, 1, "id6", "forward"]], "weavenet.sparse.layers.SetEncoderBaseSp": [[6, 2, 1, "id8", "forward"]], "weavenet.sparse.layers.SimilarityBasedMaskInference": [[6, 2, 1, "", "forward"]], "weavenet.sparse.layers.SparseDenseAdaptor": [[6, 2, 1, "id4", "to_dense"], [6, 2, 1, "id3", "to_sparse"]], "weavenet.sparse.model": [[7, 1, 1, "", "ExperimentalUnitListGeneratorSp"], [7, 1, 1, "", "TrainableMatchingModuleSp"], [7, 1, 1, "", "UnitSp"], [7, 1, 1, "", "WeaveNetUnitListGeneratorSp"]], "weavenet.sparse.model.ExperimentalUnitListGeneratorSp": [[7, 1, 1, "", "Encoder"]], "weavenet.sparse.model.TrainableMatchingModuleSp": [[7, 2, 1, "", "forward"]], "weavenet.sparse.model.UnitSp": [[7, 2, 1, "", "forward"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"api": [0, 8], "layer": [1, 6], "experiment": [1, 4, 6, 7], "privat": [1, 4, 6, 7], "loss": 2, "metric": 3, "model": [4, 7], "prefer": 5, "spars": [6, 7], "weavenet": 8, "document": 8, "indic": 8, "tabl": 8}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"API": [[0, "api"]], "Layers": [[1, "module-weavenet.layers"]], "Experimental": [[1, "module-0"], [4, "module-0"], [6, "experimental"], [7, "experimental"]], "Private Layers": [[1, "module-1"], [6, "private-layers"]], "Losses": [[2, "module-weavenet.loss"]], "Metrics": [[3, "module-weavenet.metric"]], "Models": [[4, "module-weavenet.model"]], "Private Models": [[4, "module-1"], [7, "private-models"]], "Preferences": [[5, "module-weavenet.preference"]], "Sparse Layers": [[6, "module-weavenet.sparse.layers"]], "Sparse Models": [[7, "module-weavenet.sparse.model"]], "WeaveNet API Document": [[8, "weavenet-api-document"]], "Indices and tables": [[8, "indices-and-tables"]]}, "indexentries": {"batchnormxxc (class in weavenet.layers)": [[1, "weavenet.layers.BatchNormXXC"]], "crossconcat (class in weavenet.layers)": [[1, "weavenet.layers.CrossConcat"]], "crossconcatvertexfeatures (class in weavenet.layers)": [[1, "weavenet.layers.CrossConcatVertexFeatures"]], "crossdifferenceconcat (class in weavenet.layers)": [[1, "weavenet.layers.CrossDifferenceConcat"]], "dualsoftmax (class in weavenet.layers)": [[1, "weavenet.layers.DualSoftmax"]], "dualsoftmaxfuzzylogicand (class in weavenet.layers)": [[1, "weavenet.layers.DualSoftmaxFuzzyLogicAnd"]], "dualsoftmaxsqrt (class in weavenet.layers)": [[1, "weavenet.layers.DualSoftmaxSqrt"]], "interactor (class in weavenet.layers)": [[1, "weavenet.layers.Interactor"]], "maxpoolingaggregator (class in weavenet.layers)": [[1, "weavenet.layers.MaxPoolingAggregator"]], "setencoderbase (class in weavenet.layers)": [[1, "weavenet.layers.SetEncoderBase"]], "setencoderpointnet (class in weavenet.layers)": [[1, "weavenet.layers.SetEncoderPointNet"]], "setencoderpointnetcrossdirectional (class in weavenet.layers)": [[1, "weavenet.layers.SetEncoderPointNetCrossDirectional"]], "setencoderpointnettotaldirectional (class in weavenet.layers)": [[1, "weavenet.layers.SetEncoderPointNetTotalDirectional"]], "forward() (weavenet.layers.batchnormxxc method)": [[1, "weavenet.layers.BatchNormXXC.forward"]], "forward() (weavenet.layers.crossconcat method)": [[1, "weavenet.layers.CrossConcat.forward"]], "forward() (weavenet.layers.crossconcatvertexfeatures method)": [[1, "weavenet.layers.CrossConcatVertexFeatures.forward"]], "forward() (weavenet.layers.crossdifferenceconcat method)": [[1, "weavenet.layers.CrossDifferenceConcat.forward"]], "forward() (weavenet.layers.dualsoftmax method)": [[1, "weavenet.layers.DualSoftmax.forward"]], "forward() (weavenet.layers.dualsoftmaxfuzzylogicand method)": [[1, "weavenet.layers.DualSoftmaxFuzzyLogicAnd.forward"]], "forward() (weavenet.layers.dualsoftmaxsqrt method)": [[1, "weavenet.layers.DualSoftmaxSqrt.forward"]], "forward() (weavenet.layers.interactor method)": [[1, "weavenet.layers.Interactor.forward"]], "forward() (weavenet.layers.maxpoolingaggregator method)": [[1, "weavenet.layers.MaxPoolingAggregator.forward"]], "forward() (weavenet.layers.setencoderbase method)": [[1, "weavenet.layers.SetEncoderBase.forward"]], "forward() (weavenet.layers.setencoderpointnetcrossdirectional method)": [[1, "weavenet.layers.SetEncoderPointNetCrossDirectional.forward"]], "forward() (weavenet.layers.setencoderpointnettotaldirectional method)": [[1, "weavenet.layers.SetEncoderPointNetTotalDirectional.forward"]], "module": [[1, "module-0"], [1, "module-1"], [1, "module-weavenet.layers"], [2, "module-weavenet.loss"], [3, "module-weavenet.metric"], [4, "module-0"], [4, "module-1"], [4, "module-weavenet.model"], [5, "module-weavenet.preference"], [6, "module-0"], [6, "module-1"], [6, "module-2"], [6, "module-weavenet.sparse.layers"], [7, "module-0"], [7, "module-1"], [7, "module-weavenet.sparse.model"]], "output_channels() (weavenet.layers.crossconcat method)": [[1, "weavenet.layers.CrossConcat.output_channels"]], "output_channels() (weavenet.layers.crossconcatvertexfeatures method)": [[1, "weavenet.layers.CrossConcatVertexFeatures.output_channels"]], "output_channels() (weavenet.layers.crossdifferenceconcat method)": [[1, "weavenet.layers.CrossDifferenceConcat.output_channels"]], "output_channels() (weavenet.layers.interactor method)": [[1, "weavenet.layers.Interactor.output_channels"]], "weavenet.layers": [[1, "module-0"], [1, "module-1"], [1, "module-weavenet.layers"]], "loss_balance() (in module weavenet.loss)": [[2, "weavenet.loss.loss_balance"]], "loss_egalitarian() (in module weavenet.loss)": [[2, "weavenet.loss.loss_egalitarian"]], "loss_one2many_penalty() (in module weavenet.loss)": [[2, "weavenet.loss.loss_one2many_penalty"]], "loss_one2one_correlation() (in module weavenet.loss)": [[2, "weavenet.loss.loss_one2one_correlation"]], "loss_one2one_correlation_exp() (in module weavenet.loss)": [[2, "weavenet.loss.loss_one2one_correlation_exp"]], "loss_sexequality() (in module weavenet.loss)": [[2, "weavenet.loss.loss_sexequality"]], "loss_stability() (in module weavenet.loss)": [[2, "weavenet.loss.loss_stability"]], "weavenet.loss": [[2, "module-weavenet.loss"]], "balance_score() (in module weavenet.metric)": [[3, "weavenet.metric.balance_score"]], "binarize() (in module weavenet.metric)": [[3, "weavenet.metric.binarize"]], "calc_all_fairness_metrics() (in module weavenet.metric)": [[3, "weavenet.metric.calc_all_fairness_metrics"]], "count_blocking_pairs() (in module weavenet.metric)": [[3, "weavenet.metric.count_blocking_pairs"]], "egalitarian_score() (in module weavenet.metric)": [[3, "weavenet.metric.egalitarian_score"]], "is_one2one() (in module weavenet.metric)": [[3, "weavenet.metric.is_one2one"]], "is_stable() (in module weavenet.metric)": [[3, "weavenet.metric.is_stable"]], "sexequality_cost() (in module weavenet.metric)": [[3, "weavenet.metric.sexequality_cost"]], "weavenet.metric": [[3, "module-weavenet.metric"]], "experimentalunitlistgenerator (class in weavenet.model)": [[4, "weavenet.model.ExperimentalUnitListGenerator"]], "experimentalunitlistgenerator.encoder (class in weavenet.model)": [[4, "weavenet.model.ExperimentalUnitListGenerator.Encoder"]], "trainablematchingmodule (class in weavenet.model)": [[4, "weavenet.model.TrainableMatchingModule"]], "unit (class in weavenet.model)": [[4, "weavenet.model.Unit"]], "unitlistgenerator (class in weavenet.model)": [[4, "weavenet.model.UnitListGenerator"]], "weavenetunitlistgenerator (class in weavenet.model)": [[4, "weavenet.model.WeaveNetUnitListGenerator"]], "forward() (weavenet.model.trainablematchingmodule method)": [[4, "weavenet.model.TrainableMatchingModule.forward"]], "forward() (weavenet.model.unit method)": [[4, "weavenet.model.Unit.forward"]], "generate() (weavenet.model.unitlistgenerator method)": [[4, "weavenet.model.UnitListGenerator.generate"]], "weavenet.model": [[4, "module-0"], [4, "module-1"], [4, "module-weavenet.model"]], "batch_sum() (in module weavenet.preference)": [[5, "weavenet.preference.batch_sum"]], "cost2rank() (in module weavenet.preference)": [[5, "weavenet.preference.cost2rank"]], "cost2sat() (in module weavenet.preference)": [[5, "weavenet.preference.cost2sat"]], "sat2cost() (in module weavenet.preference)": [[5, "weavenet.preference.sat2cost"]], "sat2rank() (in module weavenet.preference)": [[5, "weavenet.preference.sat2rank"]], "to_cost() (in module weavenet.preference)": [[5, "weavenet.preference.to_cost"]], "to_rank() (in module weavenet.preference)": [[5, "weavenet.preference.to_rank"]], "to_sat() (in module weavenet.preference)": [[5, "weavenet.preference.to_sat"]], "weavenet.preference": [[5, "module-weavenet.preference"]], "dualsoftmaxfuzzylogicandsp (class in weavenet.sparse.layers)": [[6, "id15"], [6, "weavenet.sparse.layers.DualSoftmaxFuzzyLogicAndSp"]], "dualsoftmaxsp (class in weavenet.sparse.layers)": [[6, "id10"], [6, "weavenet.sparse.layers.DualSoftmaxSp"]], "dualsoftmaxsqrtsp (class in weavenet.sparse.layers)": [[6, "id13"], [6, "weavenet.sparse.layers.DualSoftmaxSqrtSp"]], "maskselectorbylinearinferenceor (class in weavenet.sparse.layers)": [[6, "weavenet.sparse.layers.MaskSelectorByLinearInferenceOr"]], "maskselectorbynorm (class in weavenet.sparse.layers)": [[6, "weavenet.sparse.layers.MaskSelectorByNorm"]], "maskselectorbysimilarity (class in weavenet.sparse.layers)": [[6, "weavenet.sparse.layers.MaskSelectorBySimilarity"]], "maskselectorradiusneighbor (class in weavenet.sparse.layers)": [[6, "weavenet.sparse.layers.MaskSelectorRadiusNeighbor"]], "maskselectorreciprocalneighbor (class in weavenet.sparse.layers)": [[6, "weavenet.sparse.layers.MaskSelectorReciprocalNeighbor"]], "maxpoolingaggregatorsp (class in weavenet.sparse.layers)": [[6, "id5"], [6, "weavenet.sparse.layers.MaxPoolingAggregatorSp"]], "setencoderbasesp (class in weavenet.sparse.layers)": [[6, "id7"], [6, "weavenet.sparse.layers.SetEncoderBaseSp"]], "setencoderpointnetsp (class in weavenet.sparse.layers)": [[6, "id9"], [6, "weavenet.sparse.layers.SetEncoderPointNetSp"]], "similaritybasedmaskinference (class in weavenet.sparse.layers)": [[6, "weavenet.sparse.layers.SimilarityBasedMaskInference"]], "sparsedenseadaptor (class in weavenet.sparse.layers)": [[6, "id0"], [6, "weavenet.sparse.layers.SparseDenseAdaptor"]], "apply_softmax() (weavenet.sparse.layers.dualsoftmaxsp method)": [[6, "id11"], [6, "weavenet.sparse.layers.DualSoftmaxSp.apply_softmax"]], "build() (weavenet.sparse.layers.maskselectorbylinearinferenceor method)": [[6, "weavenet.sparse.layers.MaskSelectorByLinearInferenceOr.build"]], "forward() (weavenet.sparse.layers.dualsoftmaxfuzzylogicandsp method)": [[6, "id16"], [6, "weavenet.sparse.layers.DualSoftmaxFuzzyLogicAndSp.forward"]], "forward() (weavenet.sparse.layers.dualsoftmaxsp method)": [[6, "id12"], [6, "weavenet.sparse.layers.DualSoftmaxSp.forward"]], "forward() (weavenet.sparse.layers.dualsoftmaxsqrtsp method)": [[6, "id14"], [6, "weavenet.sparse.layers.DualSoftmaxSqrtSp.forward"]], "forward() (weavenet.sparse.layers.maskselectorbylinearinferenceor method)": [[6, "weavenet.sparse.layers.MaskSelectorByLinearInferenceOr.forward"]], "forward() (weavenet.sparse.layers.maskselectorbynorm method)": [[6, "weavenet.sparse.layers.MaskSelectorByNorm.forward"]], "forward() (weavenet.sparse.layers.maskselectorradiusneighbor method)": [[6, "weavenet.sparse.layers.MaskSelectorRadiusNeighbor.forward"]], "forward() (weavenet.sparse.layers.maskselectorreciprocalneighbor method)": [[6, "weavenet.sparse.layers.MaskSelectorReciprocalNeighbor.forward"]], "forward() (weavenet.sparse.layers.maxpoolingaggregatorsp method)": [[6, "id6"], [6, "weavenet.sparse.layers.MaxPoolingAggregatorSp.forward"]], "forward() (weavenet.sparse.layers.setencoderbasesp method)": [[6, "id8"], [6, "weavenet.sparse.layers.SetEncoderBaseSp.forward"]], "forward() (weavenet.sparse.layers.similaritybasedmaskinference method)": [[6, "weavenet.sparse.layers.SimilarityBasedMaskInference.forward"]], "get_threshold_by_k() (weavenet.sparse.layers.maskselectorbysimilarity method)": [[6, "weavenet.sparse.layers.MaskSelectorBySimilarity.get_threshold_by_k"]], "to_dense() (weavenet.sparse.layers.sparsedenseadaptor method)": [[6, "id4"], [6, "weavenet.sparse.layers.SparseDenseAdaptor.to_dense"]], "to_sparse() (weavenet.sparse.layers.sparsedenseadaptor method)": [[6, "id3"], [6, "weavenet.sparse.layers.SparseDenseAdaptor.to_sparse"]], "weavenet.sparse.layers": [[6, "module-0"], [6, "module-1"], [6, "module-2"], [6, "module-weavenet.sparse.layers"]], "wrapup() (weavenet.sparse.layers.maskselectorbysimilarity method)": [[6, "weavenet.sparse.layers.MaskSelectorBySimilarity.wrapup"]], "experimentalunitlistgeneratorsp (class in weavenet.sparse.model)": [[7, "weavenet.sparse.model.ExperimentalUnitListGeneratorSp"]], "experimentalunitlistgeneratorsp.encoder (class in weavenet.sparse.model)": [[7, "weavenet.sparse.model.ExperimentalUnitListGeneratorSp.Encoder"]], "trainablematchingmodulesp (class in weavenet.sparse.model)": [[7, "weavenet.sparse.model.TrainableMatchingModuleSp"]], "unitsp (class in weavenet.sparse.model)": [[7, "weavenet.sparse.model.UnitSp"]], "weavenetunitlistgeneratorsp (class in weavenet.sparse.model)": [[7, "weavenet.sparse.model.WeaveNetUnitListGeneratorSp"]], "forward() (weavenet.sparse.model.trainablematchingmodulesp method)": [[7, "weavenet.sparse.model.TrainableMatchingModuleSp.forward"]], "forward() (weavenet.sparse.model.unitsp method)": [[7, "weavenet.sparse.model.UnitSp.forward"]], "weavenet.sparse.model": [[7, "module-0"], [7, "module-1"], [7, "module-weavenet.sparse.model"]]}})